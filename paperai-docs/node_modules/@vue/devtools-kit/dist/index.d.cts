import * as vue from 'vue';
import { VNode } from 'vue';
import * as vue_router from 'vue-router';
import { RouteLocationNormalizedLoaded, RouteRecordNormalized, Router } from 'vue-router';
export { Router } from 'vue-router';
import { AppRecord, VueAppInstance, DevToolsState, PluginDescriptor, PluginSetupFunction } from '@vue/devtools-schema';
import * as _vue_devtools_schema_dist from '@vue/devtools-schema/dist';
import * as _vue_devtools_schema_src_types_vue from '@vue/devtools-schema/src/types/vue';

declare const RouterKey = "__VUE_DEVTOOLS_ROUTER__";

interface RouterInfo {
    currentRoute: RouteLocationNormalizedLoaded | null;
    routes: RouteRecordNormalized[];
    router: Router | null;
}
declare const devtoolsRouterInfo: RouterInfo;
declare function normalizeRouterInfo(appRecord: AppRecord): void;
declare function getRouterDevToolsId(id: string): string;

interface VueInspector {
    enabled: boolean;
    position: {
        x: number;
        y: number;
    };
    linkParams: {
        file: string;
        line: number;
        column: number;
    };
    enable: () => void;
    disable: () => void;
    toggleEnabled: () => void;
    openInEditor: (baseUrl: string, file: string, line: number, column: number) => void;
    onUpdated: () => void;
}
declare function toggleComponentInspectorEnabled(enabled: boolean): void;
declare function getVueInspector(): Promise<VueInspector | null>;

interface InspectorCustomState {
    _custom?: {
        type?: string;
        displayText?: string;
        tooltipText?: string;
        value?: string | InspectorCustomState;
        stateTypeName?: string;
        fields?: {
            abstract?: boolean;
        };
    };
}
interface InspectorState {
    key: string;
    value: string | number | boolean | null | Record<string, unknown> | InspectorCustomState | Array<unknown>;
    type: string;
    stateType?: string;
    stateTypeName?: string;
    meta?: Record<string, boolean | string>;
    raw?: string;
    editable?: boolean;
    children?: {
        key: string;
        value: string | number;
        type: string;
    }[];
}
interface InspectorStateApiPayload {
    app: VueAppInstance;
    inspectorId: string;
    nodeId: string;
}
interface AddInspectorApiPayload {
    id: string;
    label: string;
    icon?: string;
    treeFilterPlaceholder?: string;
    actions?: {
        icon: string;
        tooltip: string;
        action: (payload: unknown) => void;
    }[];
}

interface InspectorNodeTag {
    label: string;
    textColor: number;
    backgroundColor: number;
    tooltip?: string;
}
interface ComponentTreeNode {
    uid: number | string;
    id: string;
    name: string;
    renderKey: string | number;
    inactive: boolean;
    isFragment: boolean;
    children: ComponentTreeNode[];
    domOrder?: number[];
    tags: InspectorNodeTag[];
    autoOpen: boolean;
    file: string;
}
interface InspectorTreeApiPayload {
    app?: VueAppInstance;
    inspectorId?: string;
    filter?: string;
    instanceId?: string;
    rootNodes?: ComponentTreeNode[];
}

type Recordable = Record<PropertyKey, any>;

type PropPath = string | string[];
interface InspectorStateEditorPayload {
    app?: AppRecord['app'];
    inspectorId: string;
    nodeId: string;
    type: string;
    path: PropPath;
    state: {
        value: unknown;
        newKey: string;
        remove?: boolean;
        type: string;
    };
    set?: (obj: Recordable, path: PropPath, value: unknown, cb?: (object: Recordable, field: string, value: unknown) => void) => unknown;
}

interface ComponentBoundingRect {
    left: number;
    top: number;
    right: number;
    bottom: number;
    width: number;
    height: number;
}
interface ComponentBoundingRectApiPayload {
    app?: VueAppInstance;
    inspectorId?: string;
    instanceId?: string;
    rect?: ComponentBoundingRect;
}

interface TimelineEventData {
    data: Record<string, InspectorCustomState>;
}
interface TimelineEvent {
    event: {
        groupId: number;
        time: number;
        title: string;
        subtitle: string;
        data: TimelineEventData;
    };
    layerId: string;
}

interface OpenInEditorOptions {
    file?: string;
    line?: number;
    column?: number;
}
declare function openInEditor(options?: OpenInEditorOptions): void;

type TabCategory = 'pinned' | 'app' | 'modules' | 'advanced';
type ModuleView = ModuleIframeView | ModuleVNodeView;
interface ModuleIframeView {
    /**
     * Iframe view
     */
    type: 'iframe';
    /**
     * Url of the iframe
     */
    src: string;
    /**
     * Persist the iframe instance even if the tab is not active
     *
     * @default true
     */
    persistent?: boolean;
}
interface ModuleVNodeView {
    /**
     * Vue's VNode view
     */
    type: 'vnode';
    /**
     * Send vnode to the client, they must be static and serializable
     */
    vnode: VNode;
}
interface CustomTab {
    /**
     * The name of the tab, must be unique
     */
    name: string;
    /**
     * Icon of the tab, support any Iconify icons, or a url to an image
     */
    icon?: string;
    /**
     * Title of the tab
     */
    title: string;
    /**
     * Main view of the tab
     */
    view: ModuleView;
    /**
     * Category of the tab
     * @default 'app'
     */
    category?: TabCategory;
}

interface CustomCommandAction {
    type: 'url';
    /**
     * Url of the action, if set, execute the action will open the url
     */
    src: string;
}
interface CustomCommand {
    /**
     * The id of the command, should be unique
     */
    id: string;
    title: string;
    description?: string;
    /**
     * Order of the command, bigger number will be shown first
     * @default 0
     */
    order?: number;
    /**
     * Icon of the tab, support any Iconify icons, or a url to an image
     */
    icon?: string;
    /**
     * - action of the command
     * - __NOTE__: This will be ignored if `children` is set
     */
    action?: CustomCommandAction;
    /**
     * - children of action, if set, execute the action will show the children
     */
    children?: Omit<CustomCommand, 'children'>[];
}
declare function addCustomCommand(action: CustomCommand): void;
declare function removeCustomCommand(actionId: CustomCommand['id']): void;

declare function clear(): void;

interface ToggleComponentInspectorOptions {
    bounds: ComponentBoundingRect;
    name?: string;
    id?: string;
    visible?: boolean;
}
interface ScrollToComponentOptions {
    id?: string;
}

declare enum DevToolsEvents {
    DEVTOOLS_STATE_UPDATED = "devtools:state-updated",
    DEVTOOLS_CONNECTED_UPDATED = "devtools:connected-updated",
    ROUTER_INFO_UPDATED = "router-info:updated",
    COMPONENT_STATE_INSPECT = "component-state:inspect",
    TOGGLE_COMPONENT_INSPECTOR = "component-inspector:toggle",
    GET_COMPONENT_BOUNDING_RECT = "component-bounding-rect:get",
    SCROLL_TO_COMPONENT = "scroll-to-component",
    GET_INSPECTOR_TREE = "inspector-tree:get",
    SEND_INSPECTOR_TREE = "inspector-tree:send",
    GET_INSPECTOR_STATE = "inspector-state:get",
    EDIT_INSPECTOR_STATE = "inspector-state:edit",
    SEND_INSPECTOR_STATE = "inspector-state:send",
    VISIT_COMPONENT_TREE = "component-tree:visit",
    ADD_TIMELINE_EVENT = "timeline:add-event",
    CUSTOM_TABS_UPDATED = "custom-tabs:updated",
    CUSTOM_COMMANDS_UPDATED = "custom-commands:updated"
}
interface DevToolsEvent {
    [DevToolsEvents.DEVTOOLS_STATE_UPDATED]: (state: DevToolsState, oldState: DevToolsState) => void;
    [DevToolsEvents.DEVTOOLS_CONNECTED_UPDATED]: (state: DevToolsState, oldState: DevToolsState) => void;
    [DevToolsEvents.ROUTER_INFO_UPDATED]: (routerInfo: RouterInfo) => void;
    [DevToolsEvents.COMPONENT_STATE_INSPECT]: (payload: {
        componentInstance: VueAppInstance | undefined;
        app: VueAppInstance | undefined;
        instanceData: {
            id: string;
            name: string;
            file: string | undefined;
            state: InspectorState[];
            instance: VueAppInstance | undefined;
        };
    }) => void;
    [DevToolsEvents.TOGGLE_COMPONENT_INSPECTOR]: (payload: ToggleComponentInspectorOptions) => void;
    [DevToolsEvents.GET_COMPONENT_BOUNDING_RECT]: (payload: ComponentBoundingRectApiPayload) => void;
    [DevToolsEvents.SCROLL_TO_COMPONENT]: (payload: ScrollToComponentOptions) => void;
    [DevToolsEvents.GET_INSPECTOR_TREE]: (payload: InspectorTreeApiPayload) => void;
    [DevToolsEvents.SEND_INSPECTOR_TREE]: (payload: string) => void;
    [DevToolsEvents.GET_INSPECTOR_STATE]: (payload: InspectorStateApiPayload) => void;
    [DevToolsEvents.EDIT_INSPECTOR_STATE]: (payload: InspectorStateEditorPayload) => void;
    [DevToolsEvents.SEND_INSPECTOR_STATE]: (payload: string) => void;
    [DevToolsEvents.VISIT_COMPONENT_TREE]: (payload: {
        componentInstance: VueAppInstance | undefined;
        app: VueAppInstance | undefined;
        treeNode: ComponentTreeNode;
        filter: string;
    }) => void;
    [DevToolsEvents.ADD_TIMELINE_EVENT]: (payload: TimelineEvent) => void;
    [DevToolsEvents.CUSTOM_TABS_UPDATED]: (payload: CustomTab[]) => void;
    [DevToolsEvents.CUSTOM_COMMANDS_UPDATED]: (payload: CustomCommand[]) => void;
}
declare const on: {
    devtoolsStateUpdated(fn: DevToolsEvent[DevToolsEvents.DEVTOOLS_STATE_UPDATED]): void;
    routerInfoUpdated(fn: DevToolsEvent[DevToolsEvents.ROUTER_INFO_UPDATED]): void;
    getComponentBoundingRect(fn: DevToolsEvent[DevToolsEvents.GET_COMPONENT_BOUNDING_RECT]): void;
    inspectComponent(fn: DevToolsEvent[DevToolsEvents.COMPONENT_STATE_INSPECT]): void;
    visitComponentTree(fn: DevToolsEvent[DevToolsEvents.VISIT_COMPONENT_TREE]): void;
    getInspectorTree(fn: DevToolsEvent[DevToolsEvents.GET_INSPECTOR_TREE]): void;
    getInspectorState(fn: DevToolsEvent[DevToolsEvents.GET_INSPECTOR_STATE]): void;
    sendInspectorTree(fn: DevToolsEvent[DevToolsEvents.SEND_INSPECTOR_TREE]): void;
    sendInspectorState(fn: DevToolsEvent[DevToolsEvents.SEND_INSPECTOR_STATE]): void;
    addTimelineEvent(fn: DevToolsEvent[DevToolsEvents.ADD_TIMELINE_EVENT]): void;
    editInspectorState(fn: DevToolsEvent[DevToolsEvents.EDIT_INSPECTOR_STATE]): void;
    editComponentState(): void;
    customTabsUpdated(fn: DevToolsEvent[DevToolsEvents.CUSTOM_TABS_UPDATED]): void;
    customCommandsUpdated(fn: DevToolsEvent[DevToolsEvents.CUSTOM_COMMANDS_UPDATED]): void;
};

declare function setupDevToolsPlugin(pluginDescriptor: PluginDescriptor, setupFn: PluginSetupFunction): Promise<any>;

declare class DevToolsPluginApi {
    on: typeof on;
    clear: typeof clear;
    constructor();
    toggleApp(id: string): Promise<void>;
    addTimelineEvent(payload: TimelineEvent): void;
    toggleComponentInspector(payload: Parameters<DevToolsEvent[DevToolsEvents.TOGGLE_COMPONENT_INSPECTOR]>[0]): void;
    inspectComponentInspector(): Promise<string>;
    scrollToComponent(payload: Parameters<DevToolsEvent[DevToolsEvents.SCROLL_TO_COMPONENT]>[0]): void;
    getComponentBoundingRect(payload: Parameters<DevToolsEvent[DevToolsEvents.GET_COMPONENT_BOUNDING_RECT]>[0]): string;
    getInspectorTree(payload?: Parameters<DevToolsEvent[DevToolsEvents.GET_INSPECTOR_TREE]>[0]): Promise<string>;
    getInspectorState(payload?: {
        inspectorId?: string;
        nodeId?: string;
    }): string;
    editInspectorState(payload: InspectorStateEditorPayload): Promise<void>;
    sendInspectorTree(inspectorId: string): Promise<void>;
    sendInspectorState(inspectorId: string): Promise<void>;
    addCustomTab(tab: CustomTab): void;
    addCustomCommand(action: CustomCommand): void;
    removeCustomCommand(actionId: CustomCommand['id']): void;
    addInspector(payload: AddInspectorApiPayload): void;
    openInEditor(payload: OpenInEditorOptions): void;
    highlightElement(instance: any): void;
    unhighlightElement(): void;
    getComponentInstances(app: any): Promise<any[]>;
    getVueInspector(): Promise<VueInspector | null>;
    visitComponentTree(payload: Parameters<DevToolsEvent[DevToolsEvents.VISIT_COMPONENT_TREE]>[0]): void;
    addTimelineLayer(payload: {
        id: string;
        label: string;
        color: number;
    }): void;
    notifyComponentUpdate(): void;
    now(): number;
    getSettings(): {
        logStoreChanges: null;
    };
}

declare function initDevTools(): void;
declare function onDevToolsConnected(fn: () => void): Promise<void>;
declare function onDevToolsClientConnected(fn: () => void): Promise<void>;

declare function addCustomTab(tab: CustomTab): void;

declare function getInspectorStateValueType(value: any, raw?: boolean): string;
declare function formatInspectorStateValue(value: any, quotes?: boolean): any;
declare function getRawValue(value: InspectorState['value']): any;
declare function toEdit(value: unknown): string;
declare function toSubmit(value: string): any;

declare function stringify<T extends object = Record<string, unknown>>(data: T): string | string[];
declare function parse(data: string, revive?: boolean): any;

declare function now(): number;

declare const vueBuiltins: Set<string>;
declare const symbolRE: RegExp;
declare const rawTypeRE: RegExp;
declare const specialTypeRE: RegExp;
declare const fnTypeRE: RegExp;
declare const MAX_STRING_SIZE = 10000;
declare const MAX_ARRAY_SIZE = 5000;
declare const UNDEFINED = "__vue_devtool_undefined__";
declare const INFINITY = "__vue_devtool_infinity__";
declare const NEGATIVE_INFINITY = "__vue_devtool_negative_infinity__";
declare const NAN = "__vue_devtool_nan__";
declare const ESC: {
    '<': string;
    '>': string;
    '"': string;
    '&': string;
};

declare const devtools: {
    state: _vue_devtools_schema_src_types_vue.DevToolsState;
    context: {
        appRecord: _vue_devtools_schema_dist.AppRecord;
        api: DevToolsPluginApi;
        inspector: {
            id: string;
            nodeId: string;
            filter: string;
            treeFilterPlaceholder: string;
        }[];
        timelineLayer: {
            id: string;
            label: string;
            color: number;
        }[];
        routerInfo: RouterInfo;
        router: vue_router.Router;
        activeInspectorTreeId: string;
        componentPluginHookBuffer: (() => void)[];
        clear: () => void;
    };
    init: typeof initDevTools;
    hook: {
        on: {
            vueAppInit(fn: (app: vue.App<any> & vue.ComponentInternalInstance & {
                type: {
                    _componentTag: string | undefined;
                    components: Record<string, vue.ConcreteComponent<{}, any, any, vue.ComputedOptions, vue.MethodOptions, {}, any>>;
                    __VUE_DEVTOOLS_COMPONENT_GUSSED_NAME__: string;
                    __isKeepAlive: boolean;
                    devtools: {
                        hide: boolean;
                    };
                    mixins: vue.ComponentOptions[];
                    extends: vue.ComponentOptions;
                    vuex: {
                        getters: Record<string, unknown>;
                    };
                    computed: Record<string, unknown>;
                };
                __v_cache: Map<string | number | symbol | vue.ConcreteComponent, globalThis.VNode<vue.RendererNode, vue.RendererElement, {
                    [key: string]: any;
                }>>;
                __VUE_DEVTOOLS_UID__: string;
                _isBeingDestroyed: boolean;
                _instance: _vue_devtools_schema_dist.VueAppInstance;
                _container: {
                    _vnode: {
                        component: _vue_devtools_schema_dist.VueAppInstance;
                    };
                };
                isUnmounted: boolean;
                parent: _vue_devtools_schema_dist.VueAppInstance;
                appContext: {
                    app: vue.ComponentInternalInstance & any & vue.App<any> & {
                        __VUE_DEVTOOLS_APP_RECORD_ID__: string;
                        __VUE_DEVTOOLS_APP_RECORD__: _vue_devtools_schema_dist.AppRecord;
                    };
                };
                __VUE_DEVTOOLS_APP_RECORD__: _vue_devtools_schema_dist.AppRecord;
                suspense: vue.SuspenseBoundary & {
                    suspenseKey: string;
                };
                renderContext: Record<string, unknown>;
                devtoolsRawSetupState: Record<string, unknown>;
                setupState: Record<string, unknown>;
                provides: Record<string | symbol, unknown>;
                ctx: Record<string, unknown>;
            } & {
                __VUE_DEVTOOLS_APP_RECORD_ID__: string;
                __VUE_DEVTOOLS_APP_RECORD__: _vue_devtools_schema_dist.AppRecord;
            }, version: string) => void): void;
            vueAppConnected(fn: () => void): void;
            componentAdded(fn: (app: vue.App<any> & vue.ComponentInternalInstance & {
                type: {
                    _componentTag: string | undefined;
                    components: Record<string, vue.ConcreteComponent<{}, any, any, vue.ComputedOptions, vue.MethodOptions, {}, any>>;
                    __VUE_DEVTOOLS_COMPONENT_GUSSED_NAME__: string;
                    __isKeepAlive: boolean;
                    devtools: {
                        hide: boolean;
                    };
                    mixins: vue.ComponentOptions[];
                    extends: vue.ComponentOptions;
                    vuex: {
                        getters: Record<string, unknown>;
                    };
                    computed: Record<string, unknown>;
                };
                __v_cache: Map<string | number | symbol | vue.ConcreteComponent, globalThis.VNode<vue.RendererNode, vue.RendererElement, {
                    [key: string]: any;
                }>>;
                __VUE_DEVTOOLS_UID__: string;
                _isBeingDestroyed: boolean;
                _instance: _vue_devtools_schema_dist.VueAppInstance;
                _container: {
                    _vnode: {
                        component: _vue_devtools_schema_dist.VueAppInstance;
                    };
                };
                isUnmounted: boolean;
                parent: _vue_devtools_schema_dist.VueAppInstance;
                appContext: {
                    app: vue.ComponentInternalInstance & any & vue.App<any> & {
                        __VUE_DEVTOOLS_APP_RECORD_ID__: string;
                        __VUE_DEVTOOLS_APP_RECORD__: _vue_devtools_schema_dist.AppRecord;
                    };
                };
                __VUE_DEVTOOLS_APP_RECORD__: _vue_devtools_schema_dist.AppRecord;
                suspense: vue.SuspenseBoundary & {
                    suspenseKey: string;
                };
                renderContext: Record<string, unknown>;
                devtoolsRawSetupState: Record<string, unknown>;
                setupState: Record<string, unknown>;
                provides: Record<string | symbol, unknown>;
                ctx: Record<string, unknown>;
            }, uid: number, parentUid: number, component: _vue_devtools_schema_dist.VueAppInstance) => void): () => void;
            componentUpdated(fn: (app: vue.App<any> & vue.ComponentInternalInstance & {
                type: {
                    _componentTag: string | undefined;
                    components: Record<string, vue.ConcreteComponent<{}, any, any, vue.ComputedOptions, vue.MethodOptions, {}, any>>;
                    __VUE_DEVTOOLS_COMPONENT_GUSSED_NAME__: string;
                    __isKeepAlive: boolean;
                    devtools: {
                        hide: boolean;
                    };
                    mixins: vue.ComponentOptions[];
                    extends: vue.ComponentOptions;
                    vuex: {
                        getters: Record<string, unknown>;
                    };
                    computed: Record<string, unknown>;
                };
                __v_cache: Map<string | number | symbol | vue.ConcreteComponent, globalThis.VNode<vue.RendererNode, vue.RendererElement, {
                    [key: string]: any;
                }>>;
                __VUE_DEVTOOLS_UID__: string;
                _isBeingDestroyed: boolean;
                _instance: _vue_devtools_schema_dist.VueAppInstance;
                _container: {
                    _vnode: {
                        component: _vue_devtools_schema_dist.VueAppInstance;
                    };
                };
                isUnmounted: boolean;
                parent: _vue_devtools_schema_dist.VueAppInstance;
                appContext: {
                    app: vue.ComponentInternalInstance & any & vue.App<any> & {
                        __VUE_DEVTOOLS_APP_RECORD_ID__: string;
                        __VUE_DEVTOOLS_APP_RECORD__: _vue_devtools_schema_dist.AppRecord;
                    };
                };
                __VUE_DEVTOOLS_APP_RECORD__: _vue_devtools_schema_dist.AppRecord;
                suspense: vue.SuspenseBoundary & {
                    suspenseKey: string;
                };
                renderContext: Record<string, unknown>;
                devtoolsRawSetupState: Record<string, unknown>;
                setupState: Record<string, unknown>;
                provides: Record<string | symbol, unknown>;
                ctx: Record<string, unknown>;
            }, uid: number, parentUid: number, component: _vue_devtools_schema_dist.VueAppInstance) => void): () => void;
            componentRemoved(fn: (app: vue.App<any> & vue.ComponentInternalInstance & {
                type: {
                    _componentTag: string | undefined;
                    components: Record<string, vue.ConcreteComponent<{}, any, any, vue.ComputedOptions, vue.MethodOptions, {}, any>>;
                    __VUE_DEVTOOLS_COMPONENT_GUSSED_NAME__: string;
                    __isKeepAlive: boolean;
                    devtools: {
                        hide: boolean;
                    };
                    mixins: vue.ComponentOptions[];
                    extends: vue.ComponentOptions;
                    vuex: {
                        getters: Record<string, unknown>;
                    };
                    computed: Record<string, unknown>;
                };
                __v_cache: Map<string | number | symbol | vue.ConcreteComponent, globalThis.VNode<vue.RendererNode, vue.RendererElement, {
                    [key: string]: any;
                }>>;
                __VUE_DEVTOOLS_UID__: string;
                _isBeingDestroyed: boolean;
                _instance: _vue_devtools_schema_dist.VueAppInstance;
                _container: {
                    _vnode: {
                        component: _vue_devtools_schema_dist.VueAppInstance;
                    };
                };
                isUnmounted: boolean;
                parent: _vue_devtools_schema_dist.VueAppInstance;
                appContext: {
                    app: vue.ComponentInternalInstance & any & vue.App<any> & {
                        __VUE_DEVTOOLS_APP_RECORD_ID__: string;
                        __VUE_DEVTOOLS_APP_RECORD__: _vue_devtools_schema_dist.AppRecord;
                    };
                };
                __VUE_DEVTOOLS_APP_RECORD__: _vue_devtools_schema_dist.AppRecord;
                suspense: vue.SuspenseBoundary & {
                    suspenseKey: string;
                };
                renderContext: Record<string, unknown>;
                devtoolsRawSetupState: Record<string, unknown>;
                setupState: Record<string, unknown>;
                provides: Record<string | symbol, unknown>;
                ctx: Record<string, unknown>;
            }, uid: number, parentUid: number, component: _vue_devtools_schema_dist.VueAppInstance) => void): () => void;
            setupDevtoolsPlugin(fn: (pluginDescriptor: _vue_devtools_schema_dist.PluginDescriptor, setupFn: _vue_devtools_schema_dist.PluginSetupFunction) => void): void;
        };
    };
    readonly api: DevToolsPluginApi;
};

export { type AddInspectorApiPayload, type ComponentBoundingRect, type ComponentBoundingRectApiPayload, type ComponentTreeNode, type CustomCommand, type CustomCommandAction, type CustomTab, ESC, INFINITY, type InspectorCustomState, type InspectorNodeTag, type InspectorState, type InspectorStateApiPayload, type InspectorStateEditorPayload, type InspectorTreeApiPayload, MAX_ARRAY_SIZE, MAX_STRING_SIZE, type ModuleIframeView, type ModuleVNodeView, type ModuleView, NAN, NEGATIVE_INFINITY, type OpenInEditorOptions, type PropPath, type RouterInfo, RouterKey, type ScrollToComponentOptions, type TimelineEvent, type TimelineEventData, type ToggleComponentInspectorOptions, UNDEFINED, type VueInspector, addCustomCommand, addCustomTab, devtools, devtoolsRouterInfo, fnTypeRE, formatInspectorStateValue, getInspectorStateValueType, getRawValue, getRouterDevToolsId, getVueInspector, normalizeRouterInfo, now, onDevToolsClientConnected, onDevToolsConnected, openInEditor, parse, rawTypeRE, removeCustomCommand, setupDevToolsPlugin, specialTypeRE, stringify, symbolRE, toEdit, toSubmit, toggleComponentInspectorEnabled, vueBuiltins };
