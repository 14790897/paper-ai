const lang = Object.freeze({ "displayName": "Move", "name": "move", "patterns": [{ "include": "#address" }, { "include": "#comments" }, { "include": "#module" }, { "include": "#script" }, { "include": "#macros" }], "repository": { "address": { "begin": "\\b(address)\\b", "beginCaptures": { "1": { "name": "storage.modifier.type.address.keyword.move" } }, "comment": "Address block", "end": "(?<=})", "name": "meta.address_block.move", "patterns": [{ "include": "#comments" }, { "begin": "(?<=address)", "comment": "Address value/const", "end": "(?=[{])", "name": "meta.address.definition.move", "patterns": [{ "include": "#comments" }, { "include": "#address_literal" }, { "comment": "Named Address", "match": "\\b(\\w+)\\b", "name": "entity.name.type.move" }] }, { "include": "#module" }] }, "address_literal": { "patterns": [{ "comment": "16-byte (or shorter) hex address in Libra", "match": "\\b(0x[A-Fa-f0-9][A-Fa-f0-9]{,31})\\b", "name": "support.constant.diem.address.move" }, { "comment": "Bech32 with wallet1 prefix - Dfinance format", "match": "\\b(wallet1\\w{38})", "name": "support.constant.dfinance.address.move" }, { "comment": "Named address parameter (as build flag)", "match": "\\s([@]\\w+)\\b", "name": "support.constant.named.address.move" }] }, "as": { "comment": "Keyword as", "match": "\\b(as)\\b", "name": "keyword.control.move" }, "as-import": { "comment": "Keyword as in import statement", "match": "\\b(as)\\b", "name": "meta.import_as.move" }, "assert": { "comment": "Assert built-in", "match": "\\b(assert)\\b", "name": "support.function.assert.move" }, "block": { "begin": "{", "comment": "Block expression or definition", "end": "}", "name": "meta.block.move", "patterns": [{ "include": "#comments" }, { "include": "#as" }, { "include": "#mut" }, { "include": "#let" }, { "include": "#types" }, { "include": "#assert" }, { "include": "#literals" }, { "include": "#control" }, { "include": "#move_copy" }, { "include": "#resource_methods" }, { "include": "#module_access" }, { "include": "#fun_call" }, { "include": "#block" }] }, "block-comments": { "comment": "Supported since https://github.com/diem/diem/pull/3714", "patterns": [{ "begin": "/\\*[\\*!](?![\\*/])", "comment": "Block documentation comment", "end": "\\*/", "name": "comment.block.documentation.move" }, { "begin": "/\\*", "comment": "Block comment", "end": "\\*/", "name": "comment.block.move" }] }, "comments": { "name": "meta.comments.move", "patterns": [{ "include": "#line-comments" }, { "include": "#block-comments" }] }, "const": { "begin": "\\b(const)\\b", "beginCaptures": { "1": { "name": "storage.modifier.const.move" } }, "end": ";", "name": "meta.const.move", "patterns": [{ "include": "#comments" }, { "include": "#primitives" }, { "include": "#vector" }, { "include": "#literals" }, { "match": "\\b([\\w_]+)\\b", "name": "constant.other.move" }] }, "control": { "comment": "Control flow", "match": "\\b(return|while|loop|if|else|break|continue|abort)\\b", "name": "keyword.control.move" }, "entry_fun": { "begin": "\\b(entry)\\b", "beginCaptures": { "1": { "name": "storage.modifier.entry.move" } }, "comment": "entry fun name() {}", "end": "(?<=})", "name": "meta.entry_fun.move", "patterns": [{ "include": "#comments" }, { "comment": "entry native function", "match": "\\b(native)\\b", "name": "storage.modifier.native.move" }, { "comment": "entry public function", "match": "\\b(public)\\b", "name": "storage.modifier.public.move" }, { "include": "#fun" }] }, "friend": { "begin": "\\b(friend)\\b", "beginCaptures": { "1": { "name": "storage.modifier.type.move" } }, "end": ";", "name": "meta.friend.move", "patterns": [{ "include": "#comments" }, { "include": "#address_literal" }, { "comment": "Name of the imported module", "match": "\\b(\\w+)\\b", "name": "entity.name.type.module.move" }] }, "fun": { "patterns": [{ "include": "#fun_signature" }, { "include": "#fun_body" }] }, "fun_body": { "begin": "{", "comment": "Function body", "end": "}", "name": "meta.fun_body.move", "patterns": [{ "include": "#comments" }, { "include": "#import" }, { "include": "#as" }, { "include": "#mut" }, { "include": "#let" }, { "include": "#types" }, { "include": "#assert" }, { "include": "#literals" }, { "include": "#control" }, { "include": "#move_copy" }, { "include": "#resource_methods" }, { "include": "#self_access" }, { "include": "#module_access" }, { "include": "#fun_call" }, { "include": "#block" }] }, "fun_call": { "begin": "\\b(\\w+)\\s*(?:<[\\w\\s,]+>)?\\s*[(]", "beginCaptures": { "1": { "name": "entity.name.function.call.move" } }, "comment": "Function call", "end": "[)]", "name": "meta.fun_call.move", "patterns": [{ "include": "#comments" }, { "include": "#resource_methods" }, { "include": "#self_access" }, { "include": "#module_access" }, { "include": "#move_copy" }, { "include": "#literals" }, { "include": "#fun_call" }, { "include": "#block" }, { "include": "#mut" }, { "include": "#as" }] }, "fun_signature": { "begin": "\\b(fun)\\b", "beginCaptures": { "1": { "name": "storage.modifier.fun.move" } }, "comment": "Function signature", "end": "(?=[;{])", "name": "meta.fun_signature.move", "patterns": [{ "include": "#comments" }, { "include": "#module_access" }, { "include": "#types" }, { "include": "#mut" }, { "begin": "(?<=fun)", "comment": "Function name", "end": "(?=[<(])", "name": "meta.function_name.move", "patterns": [{ "include": "#comments" }, { "match": "\\b(\\w+)\\b", "name": "entity.name.function.move" }] }, { "include": "#type_param" }, { "begin": "[(]", "comment": "Parentheses", "end": "[)]", "name": "meta.parentheses.move", "patterns": [{ "include": "#comments" }, { "include": "#self_access" }, { "include": "#module_access" }, { "include": "#types" }, { "include": "#mut" }] }, { "comment": "Keyword acquires", "match": "\\b(acquires)\\b", "name": "storage.modifier" }] }, "import": { "begin": "\\b(use)\\b", "beginCaptures": { "1": { "name": "storage.modifier.type.move" } }, "end": ";", "name": "meta.import.move", "patterns": [{ "include": "#comments" }, { "include": "#address_literal" }, { "include": "#as-import" }, { "comment": "Uppercase entities", "match": "\\b([A-Z]\\w*)\\b", "name": "entity.name.type.move" }, { "begin": "{", "comment": "Module members", "end": "}", "patterns": [{ "include": "#comments" }, { "include": "#as-import" }, { "comment": "Uppercase entities", "match": "\\b([A-Z]\\w*)\\b", "name": "entity.name.type.move" }] }, { "comment": "Name of the imported module", "match": "\\b(\\w+)\\b", "name": "meta.entity.name.type.module.move" }] }, "let": { "comment": "Keyword let", "match": "\\b(let)\\b", "name": "keyword.control.move" }, "line-comments": { "begin": "//", "comment": "Single-line comment", "end": "$", "name": "comment.line.double-slash.move" }, "literals": { "patterns": [{ "comment": "Hex literal (still to find out)", "match": "0x[_a-fA-F0-9]+(?:[iu](?:8|16|32|64|size))?", "name": "constant.numeric.hex.move" }, { "comment": "Numeric literal", "match": "(?<!(?:\\w|(?:(?<!\\.)\\.)))[0-9][_0-9]*(?:\\.(?!\\.)(?:[0-9][_0-9]*)?)?(?:[eE][+\\-]?[_0-9]+)?(?:[u](?:8|16|32|64|128|256))?", "name": "constant.numeric.move" }, { "captures": { "1": { "name": "constant.character.move" } }, "comment": "Bytearray hex literal", "match": '\\b(?:h)("[a-fA-F0-9]+")' }, { "begin": '\\bb"', "comment": "ASCII Bytestring literal", "end": '"', "name": "meta.ascii_literal.move", "patterns": [{ "comment": "Special symbol escape", "match": '\\\\[nrt\\0"]', "name": "constant.character.escape.move" }, { "comment": "HEX Escape", "match": "\\\\x[a-fA-F0-9][A-Fa-f0-9]", "name": "constant.character.escape.hex.move" }, { "comment": "ASCII Character", "match": "[\\x00-\\x7F]", "name": "string.quoted.double.raw.move" }] }, { "captures": { "1": { "name": "constant.numeric.hex.move" } }, "comment": "vector<u8> as hex literal: x", "match": 'x"([A-F0-9a-f]+)"', "name": "meta.hex_literal.move" }, { "comment": "Booleans", "match": "\\b(?:true|false)\\b", "name": "constant.language.boolean.move" }, { "include": "#address_literal" }] }, "macros": { "match": '#\\[(?:[\\w0-9=,_\\(\\)\\s"\\:=]+)\\]', "name": "support.constant.macro.move" }, "module": { "begin": "\\b(module|spec)\\b", "beginCaptures": { "1": { "name": "storage.modifier.type.move" } }, "comment": "Module definition", "end": "(?<=})", "name": "meta.module.move", "patterns": [{ "include": "#comments" }, { "begin": "(?<=(module|spec))", "comment": "Module name", "end": "(?={)", "patterns": [{ "include": "#comments" }, { "begin": "(?<=(module|spec))", "comment": "Module namespace / address", "end": "(?=[(::){])", "name": "constant.other.move" }, { "begin": "(?<=::)", "comment": "Module name", "end": "(?=[\\s{])", "name": "entity.name.type.move" }] }, { "begin": "{", "comment": "Module scope", "end": "}", "name": "meta.module_scope.move", "patterns": [{ "include": "#comments" }, { "include": "#macros" }, { "include": "#import" }, { "include": "#friend" }, { "include": "#const" }, { "include": "#struct" }, { "include": "#entry_fun" }, { "include": "#native_fun" }, { "include": "#public_fun" }, { "include": "#fun" }, { "include": "#spec" }, { "include": "#block" }] }] }, "module_access": { "captures": { "1": { "name": "meta.entity.name.type.accessed.module.move" }, "2": { "name": "entity.name.function.call.move" } }, "comment": "Use of module type or method", "match": "\\b(\\w+)::(\\w+)\\b", "name": "meta.module_access.move" }, "move_copy": { "comment": "Keywords move and copy", "match": "\\b(move|copy)\\b", "name": "variable.language.move" }, "mut": { "comment": "&mut reference", "match": "(?<=&)(mut)\\b", "name": "storage.modifier.mut.move" }, "native_fun": { "begin": "\\b(native)\\b", "beginCaptures": { "1": { "name": "storage.modifier.native.move" } }, "comment": "Native function", "end": "(?<=[;}])", "name": "meta.native_fun.move", "patterns": [{ "include": "#comments" }, { "comment": "native public function", "match": "\\b(public)\\b", "name": "storage.modifier.public.move" }, { "comment": "native entry function", "match": "\\b(entry)\\b", "name": "storage.modifier.entry.move" }, { "include": "#fun_signature" }] }, "phantom": { "comment": "Keyword phantom inside type parameters", "match": "\\b(phantom)\\b", "name": "keyword.control.phantom.move" }, "primitives": { "comment": "Primitive types", "match": "\\b(u8|u16|u32|u64|u128|u256|address|bool|signer)\\b", "name": "support.type.primitives.move" }, "public_fun": { "begin": "\\b(public)\\b", "beginCaptures": { "1": { "name": "storage.modifier.public.move" } }, "comment": "Public function", "end": "(?<=[;}])", "name": "meta.public_fun.move", "patterns": [{ "include": "#comments" }, { "comment": "Public native function", "match": "\\b(native)\\b", "name": "storage.modifier.native.move" }, { "comment": "Public entry function", "match": "\\b(entry)\\b", "name": "storage.modifier.entry.move" }, { "begin": "\\(", "comment": "Script visibility", "end": "\\)", "patterns": [{ "include": "#comments" }, { "comment": "Friend or Script visibility", "match": "\\b(script|friend)\\b", "name": "storage.modifier.public.script.move" }] }, { "include": "#fun" }] }, "resource_methods": { "comment": "Methods to work with resource", "match": "\\b(borrow_global|borrow_global_mut|exists|move_from|move_to_sender|move_to)\\b", "name": "support.function.typed.move" }, "script": { "begin": "\\b(script)\\b", "beginCaptures": { "1": { "name": "storage.modifier.script.move" } }, "end": "(?<=})", "name": "meta.script.move", "patterns": [{ "include": "#comments" }, { "begin": "{", "comment": "Script scope", "end": "}", "name": "meta.script_scope.move", "patterns": [{ "include": "#const" }, { "include": "#comments" }, { "include": "#import" }, { "include": "#fun" }] }] }, "self_access": { "captures": { "1": { "name": "variable.language.self.move" }, "2": { "name": "entity.name.function.call.move" } }, "comment": "Use of Self", "match": "\\b(Self)::(\\w+)\\b", "name": "meta.self_access.move" }, "spec": { "begin": "\\b(spec)\\b", "beginCaptures": { "1": { "name": "storage.modifier.spec.move" } }, "end": "(?<=[;}])", "name": "meta.spec.move", "patterns": [{ "comment": "Spec target", "match": "\\b(module|schema|struct|fun)", "name": "storage.modifier.spec.target.move" }, { "comment": "Spec define inline", "match": "\\b(define)", "name": "storage.modifier.spec.define.move" }, { "comment": "Target name", "match": "\\b(\\w+)\\b", "name": "entity.name.function.move" }, { "begin": "{", "comment": "Spec block", "end": "}", "patterns": [{ "include": "#comments" }, { "include": "#spec_block" }, { "include": "#spec_types" }, { "include": "#spec_define" }, { "include": "#spec_keywords" }, { "include": "#control" }, { "include": "#fun_call" }, { "include": "#literals" }, { "include": "#types" }, { "include": "#let" }] }] }, "spec_block": { "begin": "{", "comment": "Spec block", "end": "}", "name": "meta.spec_block.move", "patterns": [{ "include": "#comments" }, { "include": "#spec_block" }, { "include": "#spec_types" }, { "include": "#fun_call" }, { "include": "#literals" }, { "include": "#control" }, { "include": "#types" }, { "include": "#let" }] }, "spec_define": { "begin": "\\b(define)\\b", "beginCaptures": { "1": { "name": "keyword.control.move.spec" } }, "comment": "Spec define keyword", "end": "(?=[;{])", "name": "meta.spec_define.move", "patterns": [{ "include": "#comments" }, { "include": "#spec_types" }, { "include": "#types" }, { "begin": "(?<=define)", "comment": "Function name", "end": "(?=[(])", "patterns": [{ "include": "#comments" }, { "match": "\\b(\\w+)\\b", "name": "entity.name.function.move" }] }] }, "spec_keywords": { "match": "\\b(global|pack|unpack|pragma|native|include|ensures|requires|invariant|apply|aborts_if|modifies)\\b", "name": "keyword.control.move.spec" }, "spec_types": { "comment": "Spec-only types", "match": "\\b(range|num|vector|bool|u8|u16|u32|u64|u128|u256|address)\\b", "name": "support.type.vector.move" }, "struct": { "begin": "\\b(struct)\\b", "beginCaptures": { "1": { "name": "storage.modifier.type.move" } }, "end": "(?<=})", "name": "meta.struct.move", "patterns": [{ "include": "#comments" }, { "begin": "(?<=struct)", "comment": "Struct definition", "end": "(?={)", "name": "meta.struct_def.move", "patterns": [{ "include": "#comments" }, { "comment": "Has Abilities", "match": "\\b(has)\\b", "name": "keyword.control.ability.has.move" }, { "comment": "Ability", "match": "\\b(store|key|drop|copy)\\b", "name": "entity.name.type.ability.move" }, { "comment": "Struct name", "match": "\\b(\\w+)\\b", "name": "entity.name.type.move" }, { "include": "#type_param" }] }, { "begin": "{", "comment": "Struct body", "end": "}", "name": "meta.struct_body.move", "patterns": [{ "include": "#comments" }, { "include": "#self_access" }, { "include": "#module_access" }, { "include": "#types" }] }] }, "type_param": { "begin": "<", "comment": "Generic type param", "end": ">", "name": "meta.generic_param.move", "patterns": [{ "include": "#comments" }, { "include": "#phantom" }, { "include": "#module_access" }, { "comment": "Trait-like condition", "match": "\\b(store|drop|key|copy)\\b", "name": "entity.name.type.kind.move" }] }, "types": { "comment": "Built-in types + vector", "name": "meta.types.move", "patterns": [{ "include": "#primitives" }, { "include": "#vector" }, { "comment": "Capitalized type names", "match": "\\b([A-Z][A-Za-z_]+)\\b", "name": "entity.name.type" }, { "comment": "All-uppercase const literal", "match": "\\b([A-Z_]+)\\b", "name": "constant.other.move" }] }, "vector": { "begin": "\\b(vector)<", "beginCaptures": { "1": { "name": "support.type.vector.move" } }, "end": ">", "name": "meta.vector.move", "patterns": [{ "include": "#primitives" }, { "include": "#vector" }] } }, "scopeName": "source.move" });
var move = [
  lang
];

export { move as default };
