import { ComponentInternalInstance, ComponentOptions, App, SuspenseBoundary, VNode, ConcreteComponent } from 'vue';

type CacheKey = string | number | symbol | ConcreteComponent;
type Cache = Map<CacheKey, VNode>;
type VueAppInstance = ComponentInternalInstance & {
    type: {
        _componentTag: string | undefined;
        components: Record<string, ComponentInternalInstance['type']>;
        __VUE_DEVTOOLS_COMPONENT_GUSSED_NAME__: string;
        __isKeepAlive: boolean;
        devtools: {
            hide: boolean;
        };
        mixins: ComponentOptions[];
        extends: ComponentOptions;
        vuex: {
            getters: Record<string, unknown>;
        };
        computed: Record<string, unknown>;
    };
    __v_cache: Cache;
    __VUE_DEVTOOLS_UID__: string;
    _isBeingDestroyed: boolean;
    _instance: VueAppInstance;
    _container: {
        _vnode: {
            component: VueAppInstance;
        };
    };
    isUnmounted: boolean;
    parent: VueAppInstance;
    appContext: {
        app: VueAppInstance & App & {
            __VUE_DEVTOOLS_APP_RECORD_ID__: string;
            __VUE_DEVTOOLS_APP_RECORD__: AppRecord;
        };
    };
    __VUE_DEVTOOLS_APP_RECORD__: AppRecord;
    suspense: SuspenseBoundary & {
        suspenseKey: string;
    };
    renderContext: Record<string, unknown>;
    devtoolsRawSetupState: Record<string, unknown>;
    setupState: Record<string, unknown>;
    provides: Record<string | symbol, unknown>;
    ctx: Record<string, unknown>;
};
declare type PluginSettingsItem = {
    label: string;
    description?: string;
} & ({
    type: 'boolean';
    defaultValue: boolean;
} | {
    type: 'choice';
    defaultValue: string | number;
    options: {
        value: string | number;
        label: string;
    }[];
    component?: 'select' | 'button-group';
} | {
    type: 'text';
    defaultValue: string;
});
interface PluginDescriptor {
    id: string;
    label: string;
    app: VueAppInstance;
    packageName?: string;
    homepage?: string;
    componentStateTypes?: string[];
    logo?: string;
    disableAppScope?: boolean;
    disablePluginScope?: boolean;
    /**
     * Run the plugin setup and expose the api even if the devtools is not opened yet.
     * Useful to record timeline events early.
     */
    enableEarlyProxy?: boolean;
    settings?: Record<string, PluginSettingsItem>;
}
type PluginApi = any;
type PluginSetupFunction = (api: PluginApi) => void;
interface AppRecord {
    id: string | number;
    name: string;
    app?: App;
    version?: string;
    types?: Record<string, string | symbol>;
    instanceMap: Map<string, VueAppInstance>;
    rootInstance: VueAppInstance;
    api?: PluginApi;
    routerId?: string;
    moduleDetectives?: {
        vueRouter: boolean;
        pinia: boolean;
        vueI18n: boolean;
    };
}
interface DevToolsState {
    connected: boolean;
    clientConnected: boolean;
    vitePluginDetected: boolean;
    appRecords: AppRecord[];
    activeAppRecord: AppRecord | null;
    selectedComponentId: string | null;
    pluginBuffer: [PluginDescriptor, PluginSetupFunction][];
    tabs: unknown[];
    commands: unknown[];
    activeAppRecordId: string | null;
}

interface DevToolsContext {
    appRecord: AppRecord | null;
    api: unknown;
    inspector: {
        id: string;
        nodeId: string;
        filter: string;
        treeFilterPlaceholder: string;
    }[];
    timelineLayer: {
        id: string;
        label: string;
        color: number;
    }[];
    routerInfo: unknown;
    router: unknown;
    activeInspectorTreeId: string;
    componentPluginHookBuffer: Array<() => void>;
}

declare enum DevToolsHooks {
    APP_INIT = "app:init",
    APP_UNMOUNT = "app:unmount",
    COMPONENT_UPDATED = "component:updated",
    COMPONENT_ADDED = "component:added",
    COMPONENT_REMOVED = "component:removed",
    COMPONENT_EMIT = "component:emit",
    PERFORMANCE_START = "perf:start",
    PERFORMANCE_END = "perf:end",
    ADD_ROUTE = "router:add-route",
    REMOVE_ROUTE = "router:remove-route",
    RENDER_TRACKED = "render:tracked",
    RENDER_TRIGGERED = "render:triggered",
    APP_CONNECTED = "app:connected",
    SETUP_DEVTOOLS_PLUGIN = "devtools-plugin:setup"
}
interface DevtoolsHook {
    id: string;
    enabled?: boolean;
    events: Map<DevToolsHooks, Function[]>;
    emit: (event: DevToolsHooks, ...payload: any[]) => void;
    on: (event: DevToolsHooks, handler: Function) => () => void;
    once: (event: DevToolsHooks, handler: Function) => void;
    off: (event: DevToolsHooks, handler: Function) => void;
    appRecords: AppRecord[];
    apps: Record<number, {
        componentCount: number;
    }>;
    cleanupBuffer?: (matchArg: unknown) => boolean;
}

export { type AppRecord, type DevToolsContext, DevToolsHooks, type DevToolsState, type DevtoolsHook, type PluginApi, type PluginDescriptor, type PluginSettingsItem, type PluginSetupFunction, type VueAppInstance };
